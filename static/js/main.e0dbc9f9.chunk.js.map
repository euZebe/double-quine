{"version":3,"sources":["components/PickedNumber.tsx","components/PickedNumbersList.tsx","components/NumbersBoard/NumberCell.tsx","components/NumbersBoard/NumbersBoard.tsx","components/Chronometer.tsx","pages/GameComponent.tsx","pages/GamePage.tsx","components/GameCard.tsx","components/NewGameCard.tsx","pages/Home.tsx","pages/Statistics.tsx","App.tsx","serviceWorker.ts","store/GamesStore.ts","index.tsx"],"names":["stylePicked","width","height","border","borderRadius","margin","display","justifyContent","alignItems","fontSize","color","fontFamily","styledAvailable","Object","objectSpread","PickedNumber","_this$props","this","props","value","on","react","data-testid","style","React","styles","container","gridArea","list","flexWrap","minHeight","PickedNumbersList","_ref","game","pickedValues","length","map","components_PickedNumber","key","Container","styled","div","_templateObject","NumberCell","handleClick","_this","toggleNumber","Button","onClick","basic","fluid","className","BaseRow","NumbersBoard_templateObject","Row","getOnProp","c","nextProps","_isEqual","children","_templateObject2","NumbersBoard","onValuePicked","_this$props$rows","rows","NumbersBoard_Container","Array","fill","_","rowIndex","NumbersBoard_Row","cellIndex","NumberCell_NumberCell","includes","STEP_TIME","Chronometer_templateObject","Chronometer","state","startTime","undefined","currentInterval","elapsedTime","play","Date","setInterval","getTime","setState","stop","clearInterval","timeFromPastSession","onStop","onTwoDigits","toString","padStart","startNow","previousProps","elapsedTimeAsDate","formattedTime","getUTCHours","getMinutes","getSeconds","filter","d","index","join","react_default","a","createElement","Chronometer_Container","renderElapsedTime","PureComponent","defaultProps","GameComponent_templateObject","StyledLink","Link","GameComponent_templateObject2","observer","isStarted","setDuration","handleValuePicked","GameComponent_Container","components_NumbersBoard_NumbersBoard","components_PickedNumbersList","components_Chronometer","duration","to","GamePage","inject","gamesStore","currentGameIndex","getIDAsNumber","games","initiateNewGame","match","params","id","Number","parseInt","getID","pages_GameComponent","toggleValue","handleDuration","action","_this2","_this3","getDurationInMinutes","minutes","Math","floor","concat","nbDraws","Card","header","meta","description","extra","NewGameCard","newIndex","RightPanel","Home_templateObject","Fragment","Header","as","aria-label","tabIndex","gameStore","window","confirm","trashAllGames","Group","toConsumableArray","components_GameCard","components_NewGameCard","reverse","Statistics","data","allPickedNumbers","es","columns","accessor","defaultPageSize","showPaginationBottom","defaultSorted","asc","Component","App","index_module","store","BrowserRouter","basename","process","Route","path","exact","component","Home","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","NEW_GAME_TEMPLATE","GamesStore","GamesStore_class","classCallCheck","initializerDefineProperty","GamesStore_descriptor","GamesStore_descriptor2","autorun","persistGame","getItemsFromStorage","createClass","keys","Promise","all","k","get","values","observable","JSON","parse","gameIndex","indexOfValue","indexOf","updatedGame","slice","splice","push","clear","set","stringify","toJS","allValuesPicked","g","reduce","agg","array","entries","_ref2","slicedToArray","picked","applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","getOwnPropertyDescriptor","computed","ReactDOM","render","src_App","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e0dbc9f9.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface PickedNumberProps {\r\n  value: number;\r\n  on: boolean;\r\n}\r\n\r\nconst stylePicked = {\r\n  width: \"2.5rem\",\r\n  height: \"2.5rem\",\r\n  border: \"5px solid #33e8\",\r\n  borderRadius: \"2rem\",\r\n  margin: \"3px\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  fontSize: \"large\",\r\n  // fontWeight: \"bold\",\r\n  color: \"#55f\",\r\n  fontFamily: \"monospace\"\r\n};\r\nconst styledAvailable = {\r\n  ...stylePicked,\r\n  border: \"5px solid lightgrey\",\r\n  color: \"grey\"\r\n};\r\n\r\nclass PickedNumber extends React.PureComponent<PickedNumberProps> {\r\n  render() {\r\n    const { value, on } = this.props;\r\n    return (\r\n      <div\r\n        data-testid={on ? \"picked\" : \"available\"}\r\n        style={on ? stylePicked : styledAvailable}\r\n      >\r\n        {value}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PickedNumber;\r\n","import * as React from \"react\";\r\nimport { GameType } from \"./DayContext\";\r\nimport PickedNumber from \"./PickedNumber\";\r\nimport { CSSProperties } from \"../../node_modules/@types/react-dom/node_modules/@types/react\";\r\n\r\ninterface PickedNumbersListProps {\r\n  game: GameType;\r\n}\r\n\r\nconst styles: any = {\r\n  container: {\r\n    gridArea: \"list\"\r\n  },\r\n  list: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    minHeight: \"41px\"\r\n  }\r\n};\r\n\r\nconst PickedNumbersList: React.FunctionComponent<PickedNumbersListProps> = ({\r\n  game\r\n}) => (\r\n  <div style={styles.container}>\r\n    <h2> Total tirages: {game.pickedValues.length}</h2>\r\n    <div style={styles.list}>\r\n      {game &&\r\n        game.pickedValues.map(value => (\r\n          <PickedNumber value={value} key={value} on />\r\n        ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PickedNumbersList;\r\n","import * as React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport PickedNumber from \"../PickedNumber\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\nexport interface CellProps {\r\n  value: number;\r\n  on: boolean;\r\n  toggleNumber: (value: number) => void;\r\n}\r\n\r\nexport default class NumberCell extends React.PureComponent<CellProps> {\r\n  handleClick = () => {\r\n    const { value, toggleNumber } = this.props;\r\n    toggleNumber(value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Button onClick={this.handleClick} basic fluid className=\"numberCell\">\r\n        <Container>\r\n          <PickedNumber {...this.props} />\r\n        </Container>\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport _isEqual from \"lodash/isEqual\";\r\nimport NumberCell, { CellProps } from \"./NumberCell\";\r\nimport { ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface NumbersBoardProps {\r\n  pickedValues: number[];\r\n  rows?: number;\r\n  onValuePicked: (value: number) => void;\r\n}\r\n\r\nconst BaseRow = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nclass Row extends React.Component<{ children: ReactElement<CellProps>[] }> {\r\n  getOnProp = (c: any) => c.props.on;\r\n  shouldComponentUpdate(nextProps: any) {\r\n    return !_isEqual(\r\n      nextProps.children.map(this.getOnProp),\r\n      this.props.children.map(this.getOnProp)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    return <BaseRow>{children}</BaseRow>;\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  grid-area: board;\r\n`;\r\nclass NumbersBoard extends React.PureComponent<NumbersBoardProps> {\r\n  render() {\r\n    const { pickedValues, onValuePicked } = this.props;\r\n    const { rows = 9 } = this.props;\r\n    return (\r\n      <Container>\r\n        {Array(rows)\r\n          .fill(null)\r\n          .map((_: number, rowIndex: number) => {\r\n            return (\r\n              <Row key={rowIndex}>\r\n                {Array(10)\r\n                  .fill(null)\r\n                  .map((_: number, cellIndex: number) => {\r\n                    const value = rowIndex * 10 + cellIndex + 1;\r\n                    return (\r\n                      <NumberCell\r\n                        key={cellIndex}\r\n                        value={value}\r\n                        on={pickedValues.includes(value)}\r\n                        toggleNumber={onValuePicked}\r\n                      />\r\n                    );\r\n                  })}\r\n              </Row>\r\n            );\r\n          })}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumbersBoard;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ChronometerProps {\r\n  onStop: (duration: number) => void;\r\n  startNow?: boolean;\r\n  timeFromPastSession: number;\r\n}\r\n\r\ninterface ChronometerState {\r\n  currentInterval?: any;\r\n  elapsedTime?: number;\r\n}\r\n\r\nconst STEP_TIME = 1000;\r\n\r\nconst Container = styled.div`\r\n  grid-area: chrono;\r\n  align-self: start;\r\n  justify-self: end;\r\n`;\r\n\r\nclass Chronometer extends React.PureComponent<\r\n  ChronometerProps,\r\n  ChronometerState\r\n> {\r\n  static defaultProps = {\r\n    timeFromPastSession: 0\r\n  };\r\n\r\n  state = {\r\n    startTime: undefined,\r\n    currentInterval: undefined,\r\n    elapsedTime: undefined\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.stop();\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.startNow) {\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(previousProps: ChronometerProps) {\r\n    if (!previousProps.startNow && this.props.startNow) {\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  play = () => {\r\n    const startTime = new Date();\r\n    const currentInterval = setInterval(() => {\r\n      const elapsedTime = new Date().getTime() - startTime.getTime();\r\n      if (elapsedTime === 0) debugger;\r\n      this.setState({ elapsedTime });\r\n    }, STEP_TIME);\r\n    this.setState({ currentInterval });\r\n  };\r\n\r\n  stop = () => {\r\n    clearInterval(this.state.currentInterval);\r\n\r\n    const { timeFromPastSession } = this.props;\r\n    const { elapsedTime } = this.state;\r\n    if (elapsedTime) {\r\n      this.props.onStop(elapsedTime + timeFromPastSession * 1000);\r\n    }\r\n  };\r\n\r\n  onTwoDigits = (value: number) => value.toString().padStart(2, \"0\");\r\n\r\n  renderElapsedTime() {\r\n    const { timeFromPastSession } = this.props;\r\n    const elapsedTime = this.state.elapsedTime || 0;\r\n    const elapsedTimeAsDate = new Date(\r\n      elapsedTime + timeFromPastSession * 1000\r\n    );\r\n    const formattedTime = [\r\n      elapsedTimeAsDate.getUTCHours(),\r\n      elapsedTimeAsDate.getMinutes(),\r\n      elapsedTimeAsDate.getSeconds()\r\n    ]\r\n      .map(this.onTwoDigits)\r\n      .filter((d, index) => index !== 0 || d !== \"00\")\r\n      .join(\":\");\r\n\r\n    return <h2 data-testid=\"display\">{formattedTime}</h2>;\r\n  }\r\n\r\n  render() {\r\n    return <Container>{this.renderElapsedTime()}</Container>;\r\n  }\r\n}\r\n\r\nexport default Chronometer;\r\n","import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react\";\r\nimport PickedNumbersList from \"../components/PickedNumbersList\";\r\nimport NumbersBoard from \"../components/NumbersBoard/NumbersBoard\";\r\nimport { GameType } from \"../components/DayContext\";\r\nimport Chronometer from \"../components/Chronometer\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface Props {\r\n  game: GameType;\r\n  handleValuePicked: (value: number) => void;\r\n  setDuration: (value: number) => void;\r\n  isStarted: boolean;\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  height: calc(100vh - 28px);\r\n  grid-template-areas: \"board board\" \"list chrono\" \"list button\";\r\n  grid-template-columns: 82vw 1fr;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  grid-area: button;\r\n  align-self: end;\r\n  justify-self: end;\r\n`;\r\n\r\nconst GameComponent: React.FunctionComponent<Props> = ({\r\n  game,\r\n  isStarted,\r\n  setDuration,\r\n  handleValuePicked\r\n}) => (\r\n  <Container>\r\n    <NumbersBoard\r\n      pickedValues={game.pickedValues}\r\n      onValuePicked={handleValuePicked}\r\n    />\r\n    <PickedNumbersList game={game} />\r\n\r\n    <Chronometer\r\n      startNow={isStarted}\r\n      onStop={setDuration}\r\n      timeFromPastSession={game.duration}\r\n    />\r\n    <StyledLink to=\"/\">\r\n      <Button color=\"violet\">Fin de partie</Button>\r\n    </StyledLink>\r\n  </Container>\r\n);\r\n\r\nexport default observer(GameComponent);\r\n","import * as React from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport GameComponent from \"./GameComponent\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { GamesStore } from \"../store/GamesStore\";\r\nimport { action } from \"mobx\";\r\n\r\nexport interface GameParams {\r\n  id: string;\r\n}\r\n\r\nexport interface OwnProps {\r\n  gamesStore: GamesStore;\r\n}\r\n\r\n@inject(\"gamesStore\")\r\n@observer\r\nclass GamePage extends React.Component<\r\n  RouteComponentProps<GameParams> & OwnProps\r\n> {\r\n  state = { isStarted: false };\r\n\r\n  @action\r\n  componentDidMount() {\r\n    const { gamesStore } = this.props;\r\n    gamesStore.currentGameIndex = this.getIDAsNumber();\r\n    if (this.getIDAsNumber() >= gamesStore.games.length) {\r\n      gamesStore.initiateNewGame();\r\n    }\r\n  }\r\n\r\n  getID(): string {\r\n    return this.props.match.params.id;\r\n  }\r\n  getIDAsNumber(): number {\r\n    return Number.parseInt(this.getID());\r\n  }\r\n\r\n  @action\r\n  toggleValue = (value: number) => {\r\n    const { gamesStore } = this.props;\r\n    gamesStore.toggleValue(this.getIDAsNumber(), value);\r\n    this.setState({ isStarted: true });\r\n  };\r\n\r\n  @action\r\n  handleDuration = (value: number) => {\r\n    const { gamesStore } = this.props;\r\n    gamesStore.setDuration(this.getIDAsNumber(), value);\r\n  };\r\n\r\n  render() {\r\n    const { games } = this.props.gamesStore;\r\n    if (this.getIDAsNumber() >= games.length) return \"\";\r\n    const game = games[this.getIDAsNumber()];\r\n    const { isStarted } = this.state;\r\n    return (\r\n      <GameComponent\r\n        game={game}\r\n        isStarted={isStarted}\r\n        handleValuePicked={this.toggleValue}\r\n        setDuration={this.handleDuration}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default GamePage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Button } from \"semantic-ui-react\";\r\nimport { GameType } from \"./DayContext\";\r\nimport { observer } from \"mobx-react\";\r\n\r\ninterface GameCardProps {\r\n  game: GameType;\r\n  index: number;\r\n}\r\n\r\nfunction getDurationInMinutes(duration?: number) {\r\n  if (!duration) return \"\";\r\n  const minutes = Math.floor(duration / 60);\r\n  return `${minutes} minute${minutes > 1 ? \"s\" : \"\"}`;\r\n}\r\n\r\nfunction getDrawsToString(nbDraws: number) {\r\n  return `${nbDraws} tirage${nbDraws > 1 ? \"s\" : \"\"}`;\r\n}\r\n\r\nconst GameCard: React.FunctionComponent<GameCardProps> = ({ game, index }) => {\r\n  return (\r\n    <Card\r\n      header={`Partie ${index + 1}`}\r\n      meta={getDrawsToString(game.pickedValues.length) + \" - \" + getDurationInMinutes(game.duration)}\r\n      description={\r\n        <span data-testid=\"game-card\">{game.pickedValues.join(\", \")}</span>\r\n      }\r\n      extra={\r\n        <Link to={`/game/${index}`}>\r\n          <Button basic color=\"violet\">\r\n            Continuer\r\n          </Button>\r\n        </Link>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(GameCard);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Button } from \"semantic-ui-react\";\r\n\r\nconst NewGameCard: React.FunctionComponent<{ newIndex: number }> = ({\r\n  newIndex\r\n}) => (\r\n  <Card\r\n    description=\"Démarrer nouvelle partie\"\r\n    extra={\r\n      <Link to={`/game/${newIndex}`}>\r\n        <Button color=\"violet\">Nouvelle partie</Button>\r\n      </Link>\r\n    }\r\n  />\r\n);\r\n\r\nexport default NewGameCard;\r\n","import React from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { Card, Button, Header } from \"semantic-ui-react\";\r\nimport { GamesStore } from \"../store/GamesStore\";\r\nimport GameCard from \"../components/GameCard\";\r\nimport NewGameCard from \"../components/NewGameCard\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction handleTrashAll(gameStore: GamesStore) {\r\n  if (window.confirm(\"Voulez-vous supprimer toutes les parties ?\")) {\r\n    gameStore.trashAllGames();\r\n  }\r\n}\r\n\r\nconst RightPanel = styled.div`\r\n  float: right;\r\n`;\r\n\r\nconst Home: React.FunctionComponent<{ gamesStore: GamesStore }> = ({\r\n  gamesStore\r\n}) => (\r\n  <>\r\n    <Header as=\"div\">\r\n      Double-quine\r\n      <RightPanel>\r\n        <Link to=\"/stats\">\r\n          <Button basic color=\"violet\">\r\n            statistiques\r\n          </Button>\r\n        </Link>\r\n        <Button\r\n          color=\"red\"\r\n          basic\r\n          aria-label=\"clear all games\"\r\n          tabIndex={0}\r\n          onClick={() => handleTrashAll(gamesStore)}\r\n        >\r\n          tout supprimer\r\n        </Button>\r\n      </RightPanel>\r\n    </Header>\r\n    <Card.Group className=\"fullWidth\">\r\n      {gamesStore.games &&\r\n        [\r\n          ...gamesStore.games.map((game, index) => (\r\n            <GameCard key={index} game={game} index={index} />\r\n          )),\r\n          <NewGameCard\r\n            newIndex={gamesStore.games.length}\r\n            key={gamesStore.games.length}\r\n          />\r\n        ].reverse()}\r\n    </Card.Group>\r\n  </>\r\n);\r\n\r\nexport default inject(\"gamesStore\")(observer(Home));\r\n","import React from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport Table from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\nimport { GamesStore } from \"../store/GamesStore\";\r\n\r\ninterface StatisticsProps {\r\n  gamesStore: GamesStore;\r\n}\r\n\r\n@inject(\"gamesStore\")\r\n@observer\r\nclass Statistics extends React.Component<StatisticsProps> {\r\n  render() {\r\n    const { gamesStore } = this.props;\r\n    const data = gamesStore.allPickedNumbers;\r\n    return (\r\n      <>\r\n        <h1>Statistiques</h1>\r\n        <h2>Toutes parties confondues</h2>\r\n        {data.length ? (\r\n          <Table\r\n            data={data}\r\n            className=\"-striped -highlight\"\r\n            columns={[\r\n              { Header: \"Numéro\", accessor: \"value\" },\r\n              { Header: \"tirages\", accessor: \"picked\" }\r\n            ]}\r\n            defaultPageSize={data.length}\r\n            showPaginationBottom={false}\r\n            defaultSorted={[\r\n              {\r\n                id: \"value\",\r\n                asc: true\r\n              },\r\n              {\r\n                id: \"picked\",\r\n                asc: true\r\n              }\r\n            ]}\r\n          />\r\n        ) : <em>aucune partie trouvée</em>}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport GamePage from \"./pages/GamePage\";\r\nimport { observer, Provider } from \"mobx-react\";\r\nimport Home from \"./pages/Home\";\r\nimport { GamesStore } from \"./store/GamesStore\";\r\nimport Statistics from \"./pages/Statistics\";\r\n\r\ninterface Props {\r\n  store: GamesStore;\r\n}\r\n\r\n@observer\r\nclass App extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Provider gamesStore={this.props.store}>\r\n          <Router basename={process.env.PUBLIC_URL}>\r\n            <div>\r\n              <Route path=\"/\" exact component={Home} />\r\n              <Route path=\"/game/:id\" component={GamePage} />\r\n              <Route path=\"/stats\" component={Statistics} />\r\n            </div>\r\n          </Router>\r\n        </Provider>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { action, autorun, computed, observable, toJS } from \"mobx\";\r\nimport { set, keys, get, clear } from \"idb-keyval\";\r\nimport { GameType } from \"../components/DayContext\";\r\nimport { TableDataType } from \"./Types\";\r\n\r\nconst NEW_GAME_TEMPLATE = { pickedValues: [], duration: 0 };\r\n\r\nexport class GamesStore {\r\n  constructor() {\r\n    autorun(() => {\r\n      this.persistGame(\r\n        this.currentGameIndex,\r\n        this.games[this.currentGameIndex]\r\n      );\r\n    });\r\n\r\n    this.getItemsFromStorage();\r\n  }\r\n\r\n  @observable games: GameType[] = [];\r\n\r\n  private getItemsFromStorage(): void {\r\n    keys().then(keys =>\r\n      Promise.all(keys.map(k => get(k))).then(values => {\r\n        this.games = values.map(value =>\r\n          observable(JSON.parse(value.toString()))\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  @observable currentGameIndex: number = -1;\r\n\r\n  @action\r\n  toggleValue(gameIndex: number, value: number) {\r\n    const game = this.games[gameIndex];\r\n    const { pickedValues } = game;\r\n    const indexOfValue = pickedValues.indexOf(value);\r\n    if (pickedValues.length && indexOfValue === pickedValues.length - 1) {\r\n      // remove last\r\n      const updatedGame = {\r\n        ...game,\r\n        pickedValues: pickedValues.slice(0, pickedValues.length - 1)\r\n      };\r\n      this.games.splice(gameIndex, 1, updatedGame);\r\n    } else if (indexOfValue === -1) {\r\n      // if value exists in the array but not at the last place, don't add it\r\n      const updatedGame = { ...game, pickedValues: [...pickedValues, value] };\r\n      this.games.splice(gameIndex, 1, updatedGame);\r\n    }\r\n  }\r\n\r\n  @action\r\n  setDuration(gameIndex: number, duration: number): void {\r\n    this.games[gameIndex].duration = Math.floor(duration / 1000); // stores duration in seconds\r\n  }\r\n\r\n  @action\r\n  initiateNewGame(): void {\r\n    this.games.push(NEW_GAME_TEMPLATE);\r\n  }\r\n\r\n  @action\r\n  trashAllGames(): void {\r\n    this.games.splice(0, this.games.length);\r\n    this.currentGameIndex = -1;\r\n    clear().catch(console.error);\r\n  }\r\n\r\n  @computed\r\n  get allPickedNumbers(): TableDataType[] {\r\n    const allValuesPicked = this.games\r\n      .map(g => g.pickedValues)\r\n      .reduce((agg, array) => [...agg, ...array], [])\r\n      .reduce((agg: any, value) => {\r\n        agg[value] = agg[value] ? agg[value] + 1 : 1;\r\n        return agg;\r\n      }, {});\r\n\r\n    const data = Object.entries(allValuesPicked).map(([value, picked]) => ({\r\n      value: Number.parseInt(value),\r\n      picked: Number.parseInt(picked.toString())\r\n    }));\r\n\r\n    return data;\r\n  }\r\n\r\n  private persistGame(gameIndex: number, game: GameType) {\r\n    if (\r\n      this.currentGameIndex >= 0 &&\r\n      this.currentGameIndex < this.games.length\r\n    ) {\r\n      set(gameIndex.toString(), JSON.stringify(toJS(game))).catch(\r\n        console.error\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { GamesStore } from \"./store/GamesStore\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport './styles.css';\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  const { whyDidYouUpdate } = require(\"why-did-you-update\");\r\n  whyDidYouUpdate(React);\r\n}\r\n\r\nconst store = new GamesStore();\r\n\r\nReactDOM.render(<App store={store} />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}