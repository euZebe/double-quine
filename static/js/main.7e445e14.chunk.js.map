{"version":3,"sources":["components/PickedNumber.tsx","components/PickedNumbersList.tsx","components/NumbersBoard/StatisticsCell.tsx","components/NumbersBoard/NumbersBoard.tsx","components/Chronometer.tsx","pages/GameComponent.tsx","pages/GamePage.tsx","components/GameCard.tsx","components/NewGameCard.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","store/GamesStore.ts","index.tsx"],"names":["stylePicked","width","height","border","borderRadius","margin","display","justifyContent","alignItems","fontSize","color","fontFamily","styledAvailable","Object","objectSpread","PickedNumber","_this$props","this","props","value","on","react","data-testid","style","React","styles","container","gridArea","list","flexWrap","minHeight","PickedNumbersList","_ref","game","pickedValues","length","map","components_PickedNumber","key","Container","styled","div","_templateObject","Count","span","_templateObject2","StatisticsCell","handleClick","_this","toggleNumber","timesPicked","Button","onClick","basic","fluid","className","BaseRow","NumbersBoard_templateObject","Row","getOnProp","c","nextProps","_isEqual","children","NumbersBoard_templateObject2","NumbersBoard","inject","observer","onValuePicked","gamesStore","_this$props$rows","rows","NumbersBoard_Container","Array","fill","_","rowIndex","NumbersBoard_Row","cellIndex","StatisticsCell_StatisticsCell","includes","allPickedNumbers","defaultProps","STEP_TIME","Chronometer_templateObject","Chronometer","state","startTime","undefined","currentInterval","elapsedTime","play","Date","setInterval","getTime","setState","stop","clearInterval","timeFromPastSession","onStop","onTwoDigits","toString","padStart","startNow","previousProps","elapsedTimeAsDate","formattedTime","getUTCHours","getMinutes","getSeconds","filter","d","index","join","react_default","a","createElement","Chronometer_Container","renderElapsedTime","PureComponent","GameComponent_templateObject","StyledLink","Link","GameComponent_templateObject2","isStarted","setDuration","handleValuePicked","GameComponent_Container","components_NumbersBoard_NumbersBoard","components_PickedNumbersList","components_Chronometer","duration","to","GamePage","currentGameIndex","getIDAsNumber","games","initiateNewGame","match","params","id","Number","parseInt","getID","pages_GameComponent","toggleValue","handleDuration","action","_this2","_this3","getDurationInMinutes","minutes","Math","floor","concat","nbDraws","Card","header","meta","description","extra","NewGameCard","newIndex","RightPanel","Home_templateObject","Fragment","Header","as","aria-label","tabIndex","gameStore","window","confirm","trashAllGames","Group","toConsumableArray","components_GameCard","components_NewGameCard","reverse","App","index_module","store","BrowserRouter","basename","process","Route","path","exact","component","Home","Component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","NEW_GAME_TEMPLATE","GamesStore","GamesStore_class","classCallCheck","initializerDefineProperty","GamesStore_descriptor","GamesStore_descriptor2","autorun","persistGame","getItemsFromStorage","createClass","keys","Promise","all","k","get","values","observable","JSON","parse","gameIndex","indexOfValue","indexOf","updatedGame","slice","splice","push","clear","set","stringify","toJS","g","reduce","agg","array","applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","getOwnPropertyDescriptor","computed","ReactDOM","render","src_App","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7e445e14.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface PickedNumberProps {\r\n  value: number;\r\n  on: boolean;\r\n}\r\n\r\nconst stylePicked = {\r\n  width: \"2.5rem\",\r\n  height: \"2.5rem\",\r\n  border: \"5px solid rgba(85, 85, 255, .8)\",\r\n  borderRadius: \"2rem\",\r\n  margin: \"3px\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n  alignItems: \"center\",\r\n  fontSize: \"large\",\r\n  // fontWeight: \"bold\",\r\n  color: \"#55f\",\r\n  fontFamily: \"monospace\"\r\n};\r\nconst styledAvailable = {\r\n  ...stylePicked,\r\n  border: \"5px solid lightgrey\",\r\n  color: \"grey\"\r\n};\r\n\r\nclass PickedNumber extends React.PureComponent<PickedNumberProps> {\r\n  render() {\r\n    const { value, on } = this.props;\r\n    return (\r\n      <div\r\n        data-testid={on ? \"picked\" : \"available\"}\r\n        style={on ? stylePicked : styledAvailable}\r\n      >\r\n        {value}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PickedNumber;\r\n","import * as React from \"react\";\r\nimport { GameType } from \"./DayContext\";\r\nimport PickedNumber from \"./PickedNumber\";\r\nimport { CSSProperties } from \"../../node_modules/@types/react-dom/node_modules/@types/react\";\r\n\r\ninterface PickedNumbersListProps {\r\n  game: GameType;\r\n}\r\n\r\nconst styles: any = {\r\n  container: {\r\n    gridArea: \"list\"\r\n  },\r\n  list: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    minHeight: \"41px\"\r\n  }\r\n};\r\n\r\nconst PickedNumbersList: React.FunctionComponent<PickedNumbersListProps> = ({\r\n  game\r\n}) => (\r\n  <div style={styles.container}>\r\n    <h2> Total tirages: {game.pickedValues.length}</h2>\r\n    <div style={styles.list}>\r\n      {game &&\r\n        game.pickedValues.map(value => (\r\n          <PickedNumber value={value} key={value} on />\r\n        ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PickedNumbersList;\r\n","import * as React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport PickedNumber from \"../PickedNumber\";\r\nimport styled from \"styled-components\";\r\nimport { CellProps } from \"./CellPropsType\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Count = styled.span`\r\n  position: relative;\r\n  top: 2rem;\r\n  left: 1rem;\r\n  font-size: 1.5rem;\r\n  width: 0;\r\n`;\r\n\r\nexport default class StatisticsCell extends React.PureComponent<CellProps> {\r\n  handleClick = () => {\r\n    const { value, toggleNumber } = this.props;\r\n    toggleNumber(value);\r\n  };\r\n\r\n  render() {\r\n    const { timesPicked } = this.props;\r\n    return (\r\n      <Button onClick={this.handleClick} basic fluid className=\"numberCell\">\r\n        <Container>\r\n          <PickedNumber {...this.props} />\r\n          <Count>{timesPicked}</Count>\r\n        </Container>\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport _isEqual from \"lodash/isEqual\";\r\nimport { CellProps } from \"./NumberCell\";\r\nimport { ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport StatisticsCell from \"./StatisticsCell\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { GamesStore } from \"../../store/GamesStore\";\r\n\r\ninterface NumbersBoardProps {\r\n  pickedValues: number[];\r\n  rows?: number;\r\n  onValuePicked: (value: number) => void;\r\n  gamesStore?: GamesStore;\r\n}\r\n\r\nconst BaseRow = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nclass Row extends React.Component<{ children: ReactElement<CellProps>[] }> {\r\n  getOnProp = (c: any) => c.props.on;\r\n  shouldComponentUpdate(nextProps: any) {\r\n    return !_isEqual(\r\n      nextProps.children.map(this.getOnProp),\r\n      this.props.children.map(this.getOnProp)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    return <BaseRow>{children}</BaseRow>;\r\n  }\r\n}\r\n\r\nconst Container = styled.div`\r\n  grid-area: board;\r\n`;\r\n\r\n@inject(\"gamesStore\")\r\n@observer\r\nclass NumbersBoard extends React.Component<NumbersBoardProps> {\r\n  static defaultProps = {\r\n    gamesStore: null\r\n  };\r\n\r\n  render() {\r\n    const { pickedValues, onValuePicked, gamesStore } = this.props;\r\n    const { rows = 9 } = this.props;\r\n    return (\r\n      <Container>\r\n        {Array(rows)\r\n          .fill(null)\r\n          .map((_: number, rowIndex: number) => {\r\n            return (\r\n              <Row key={rowIndex}>\r\n                {Array(10)\r\n                  .fill(null)\r\n                  .map((_: number, cellIndex: number) => {\r\n                    const value = rowIndex * 10 + cellIndex + 1;\r\n                    return (\r\n                      <StatisticsCell\r\n                        key={cellIndex}\r\n                        value={value}\r\n                        on={pickedValues.includes(value)}\r\n                        toggleNumber={onValuePicked}\r\n                        timesPicked={gamesStore ? gamesStore.allPickedNumbers[value] : 0}\r\n                      />\r\n                    );\r\n                  })}\r\n              </Row>\r\n            );\r\n          })}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumbersBoard;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ChronometerProps {\r\n  onStop: (duration: number) => void;\r\n  startNow?: boolean;\r\n  timeFromPastSession: number;\r\n}\r\n\r\ninterface ChronometerState {\r\n  currentInterval?: any;\r\n  elapsedTime?: number;\r\n}\r\n\r\nconst STEP_TIME = 1000;\r\n\r\nconst Container = styled.div`\r\n  grid-area: chrono;\r\n  align-self: start;\r\n  justify-self: end;\r\n`;\r\n\r\nclass Chronometer extends React.PureComponent<\r\n  ChronometerProps,\r\n  ChronometerState\r\n> {\r\n  static defaultProps = {\r\n    timeFromPastSession: 0\r\n  };\r\n\r\n  state = {\r\n    startTime: undefined,\r\n    currentInterval: undefined,\r\n    elapsedTime: undefined\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.stop();\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.startNow) {\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(previousProps: ChronometerProps) {\r\n    if (!previousProps.startNow && this.props.startNow) {\r\n      this.play();\r\n    }\r\n  }\r\n\r\n  play = () => {\r\n    const startTime = new Date();\r\n    const currentInterval = setInterval(() => {\r\n      const elapsedTime = new Date().getTime() - startTime.getTime();\r\n      if (elapsedTime === 0) debugger;\r\n      this.setState({ elapsedTime });\r\n    }, STEP_TIME);\r\n    this.setState({ currentInterval });\r\n  };\r\n\r\n  stop = () => {\r\n    clearInterval(this.state.currentInterval);\r\n\r\n    const { timeFromPastSession } = this.props;\r\n    const { elapsedTime } = this.state;\r\n    if (elapsedTime) {\r\n      this.props.onStop(elapsedTime + timeFromPastSession * 1000);\r\n    }\r\n  };\r\n\r\n  onTwoDigits = (value: number) => value.toString().padStart(2, \"0\");\r\n\r\n  renderElapsedTime() {\r\n    const { timeFromPastSession } = this.props;\r\n    const elapsedTime = this.state.elapsedTime || 0;\r\n    const elapsedTimeAsDate = new Date(\r\n      elapsedTime + timeFromPastSession * 1000\r\n    );\r\n    const formattedTime = [\r\n      elapsedTimeAsDate.getUTCHours(),\r\n      elapsedTimeAsDate.getMinutes(),\r\n      elapsedTimeAsDate.getSeconds()\r\n    ]\r\n      .map(this.onTwoDigits)\r\n      .filter((d, index) => index !== 0 || d !== \"00\")\r\n      .join(\":\");\r\n\r\n    return <h2 data-testid=\"display\">{formattedTime}</h2>;\r\n  }\r\n\r\n  render() {\r\n    return <Container>{this.renderElapsedTime()}</Container>;\r\n  }\r\n}\r\n\r\nexport default Chronometer;\r\n","import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react\";\r\nimport PickedNumbersList from \"../components/PickedNumbersList\";\r\nimport NumbersBoard from \"../components/NumbersBoard/NumbersBoard\";\r\nimport { GameType } from \"../components/DayContext\";\r\nimport Chronometer from \"../components/Chronometer\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface Props {\r\n  game: GameType;\r\n  handleValuePicked: (value: number) => void;\r\n  setDuration: (value: number) => void;\r\n  isStarted: boolean;\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  height: calc(100vh - 28px);\r\n  grid-template-areas: \"board board\" \"list chrono\" \"list button\";\r\n  grid-template-columns: 82vw 1fr;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  grid-area: button;\r\n  align-self: end;\r\n  justify-self: end;\r\n`;\r\n\r\nconst GameComponent: React.FunctionComponent<Props> = ({\r\n  game,\r\n  isStarted,\r\n  setDuration,\r\n  handleValuePicked\r\n}) => (\r\n  <Container>\r\n    <NumbersBoard\r\n      pickedValues={game.pickedValues}\r\n      onValuePicked={handleValuePicked}\r\n    />\r\n    <PickedNumbersList game={game} />\r\n\r\n    <Chronometer\r\n      startNow={isStarted}\r\n      onStop={setDuration}\r\n      timeFromPastSession={game.duration}\r\n    />\r\n    <StyledLink to=\"/\">\r\n      <Button color=\"violet\">Fin de partie</Button>\r\n    </StyledLink>\r\n  </Container>\r\n);\r\n\r\nexport default observer(GameComponent);\r\n","import * as React from \"react\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport GameComponent from \"./GameComponent\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { GamesStore } from \"../store/GamesStore\";\r\nimport { action } from \"mobx\";\r\n\r\nexport interface GameParams {\r\n  id: string;\r\n}\r\n\r\nexport interface OwnProps {\r\n  gamesStore: GamesStore;\r\n}\r\n\r\n@inject(\"gamesStore\")\r\n@observer\r\nclass GamePage extends React.Component<\r\n  RouteComponentProps<GameParams> & OwnProps\r\n> {\r\n  state = { isStarted: false };\r\n\r\n  @action\r\n  componentDidMount() {\r\n    const { gamesStore } = this.props;\r\n    gamesStore.currentGameIndex = this.getIDAsNumber();\r\n    if (this.getIDAsNumber() >= gamesStore.games.length) {\r\n      gamesStore.initiateNewGame();\r\n    }\r\n  }\r\n\r\n  getID(): string {\r\n    return this.props.match.params.id;\r\n  }\r\n  getIDAsNumber(): number {\r\n    return Number.parseInt(this.getID());\r\n  }\r\n\r\n  @action\r\n  toggleValue = (value: number) => {\r\n    const { gamesStore } = this.props;\r\n    gamesStore.toggleValue(this.getIDAsNumber(), value);\r\n    this.setState({ isStarted: true });\r\n  };\r\n\r\n  @action\r\n  handleDuration = (value: number) => {\r\n    const { gamesStore } = this.props;\r\n    gamesStore.setDuration(this.getIDAsNumber(), value);\r\n  };\r\n\r\n  render() {\r\n    const { gamesStore } = this.props;\r\n    const { games } = gamesStore;\r\n    if (this.getIDAsNumber() >= games.length) return \"\";\r\n    const game = games[this.getIDAsNumber()];\r\n    const { isStarted } = this.state;\r\n    return (\r\n      <GameComponent\r\n        game={game}\r\n        isStarted={isStarted}\r\n        handleValuePicked={this.toggleValue}\r\n        setDuration={this.handleDuration}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default GamePage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Button } from \"semantic-ui-react\";\r\nimport { GameType } from \"./DayContext\";\r\nimport { observer } from \"mobx-react\";\r\n\r\ninterface GameCardProps {\r\n  game: GameType;\r\n  index: number;\r\n}\r\n\r\nfunction getDurationInMinutes(duration?: number) {\r\n  if (!duration) return \"\";\r\n  const minutes = Math.floor(duration / 60);\r\n  return `${minutes} minute${minutes > 1 ? \"s\" : \"\"}`;\r\n}\r\n\r\nfunction getDrawsToString(nbDraws: number) {\r\n  return `${nbDraws} tirage${nbDraws > 1 ? \"s\" : \"\"}`;\r\n}\r\n\r\nconst GameCard: React.FunctionComponent<GameCardProps> = ({ game, index }) => {\r\n  return (\r\n    <Card\r\n      header={`Partie ${index + 1}`}\r\n      meta={getDrawsToString(game.pickedValues.length) + \" - \" + getDurationInMinutes(game.duration)}\r\n      description={\r\n        <span data-testid=\"game-card\">{game.pickedValues.join(\", \")}</span>\r\n      }\r\n      extra={\r\n        <Link to={`/game/${index}`}>\r\n          <Button basic color=\"violet\">\r\n            Continuer\r\n          </Button>\r\n        </Link>\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(GameCard);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Button } from \"semantic-ui-react\";\r\n\r\nconst NewGameCard: React.FunctionComponent<{ newIndex: number }> = ({\r\n  newIndex\r\n}) => (\r\n  <Card\r\n    description=\"Démarrer nouvelle partie\"\r\n    extra={\r\n      <Link to={`/game/${newIndex}`}>\r\n        <Button color=\"violet\">Nouvelle partie</Button>\r\n      </Link>\r\n    }\r\n  />\r\n);\r\n\r\nexport default NewGameCard;\r\n","import React from \"react\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport { Card, Button, Header } from \"semantic-ui-react\";\r\nimport { GamesStore } from \"../store/GamesStore\";\r\nimport GameCard from \"../components/GameCard\";\r\nimport NewGameCard from \"../components/NewGameCard\";\r\nimport styled from \"styled-components\";\r\n\r\nfunction handleTrashAll(gameStore: GamesStore) {\r\n  if (window.confirm(\"Voulez-vous supprimer toutes les parties ?\")) {\r\n    gameStore.trashAllGames();\r\n  }\r\n}\r\n\r\nconst RightPanel = styled.div`\r\n  float: right;\r\n`;\r\n\r\nconst Home: React.FunctionComponent<{ gamesStore: GamesStore }> = ({\r\n  gamesStore\r\n}) => (\r\n  <>\r\n    <Header as=\"div\">\r\n      Double-quine\r\n      <RightPanel>\r\n        <Button\r\n          color=\"red\"\r\n          basic\r\n          aria-label=\"clear all games\"\r\n          tabIndex={0}\r\n          onClick={() => handleTrashAll(gamesStore)}\r\n        >\r\n          tout supprimer\r\n        </Button>\r\n      </RightPanel>\r\n    </Header>\r\n    <Card.Group className=\"fullWidth\">\r\n      {gamesStore.games &&\r\n        [\r\n          ...gamesStore.games.map((game, index) => (\r\n            <GameCard key={index} game={game} index={index} />\r\n          )),\r\n          <NewGameCard\r\n            newIndex={gamesStore.games.length}\r\n            key={gamesStore.games.length}\r\n          />\r\n        ].reverse()}\r\n    </Card.Group>\r\n  </>\r\n);\r\n\r\nexport default inject(\"gamesStore\")(observer(Home));\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport GamePage from \"./pages/GamePage\";\r\nimport { observer, Provider } from \"mobx-react\";\r\nimport Home from \"./pages/Home\";\r\nimport { GamesStore } from \"./store/GamesStore\";\r\n\r\ninterface Props {\r\n  store: GamesStore;\r\n}\r\n\r\n@observer\r\nclass App extends React.Component<Props> {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Provider gamesStore={this.props.store}>\r\n          <Router basename={process.env.PUBLIC_URL}>\r\n            <div>\r\n              <Route path=\"/\" exact component={Home} />\r\n              <Route path=\"/game/:id\" component={GamePage} />\r\n            </div>\r\n          </Router>\r\n        </Provider>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { action, autorun, computed, observable, toJS } from \"mobx\";\r\nimport { set, keys, get, clear } from \"idb-keyval\";\r\nimport { GameType } from \"../components/DayContext\";\r\n\r\nconst NEW_GAME_TEMPLATE = { pickedValues: [], duration: 0 };\r\n\r\nexport class GamesStore {\r\n  constructor() {\r\n    autorun(() => {\r\n      this.persistGame(\r\n        this.currentGameIndex,\r\n        this.games[this.currentGameIndex]\r\n      );\r\n    });\r\n\r\n    this.getItemsFromStorage();\r\n  }\r\n\r\n  @observable games: GameType[] = [];\r\n\r\n  private getItemsFromStorage(): void {\r\n    keys().then(keys =>\r\n      Promise.all(keys.map(k => get(k))).then(values => {\r\n        this.games = values.map(value =>\r\n          observable(JSON.parse(value.toString()))\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  @observable currentGameIndex: number = -1;\r\n\r\n  @action\r\n  toggleValue(gameIndex: number, value: number) {\r\n    const game = this.games[gameIndex];\r\n    const { pickedValues } = game;\r\n    const indexOfValue = pickedValues.indexOf(value);\r\n    if (pickedValues.length && indexOfValue === pickedValues.length - 1) {\r\n      // remove last\r\n      const updatedGame = {\r\n        ...game,\r\n        pickedValues: pickedValues.slice(0, pickedValues.length - 1)\r\n      };\r\n      this.games.splice(gameIndex, 1, updatedGame);\r\n    } else if (indexOfValue === -1) {\r\n      // if value exists in the array but not at the last place, don't add it\r\n      const updatedGame = { ...game, pickedValues: [...pickedValues, value] };\r\n      this.games.splice(gameIndex, 1, updatedGame);\r\n    }\r\n  }\r\n\r\n  @action\r\n  setDuration(gameIndex: number, duration: number): void {\r\n    this.games[gameIndex].duration = Math.floor(duration / 1000); // stores duration in seconds\r\n  }\r\n\r\n  @action\r\n  initiateNewGame(): void {\r\n    this.games.push(NEW_GAME_TEMPLATE);\r\n  }\r\n\r\n  @action\r\n  trashAllGames(): void {\r\n    this.games.splice(0, this.games.length);\r\n    this.currentGameIndex = -1;\r\n    clear().catch(console.error);\r\n  }\r\n\r\n  @computed\r\n  get allPickedNumbers() {\r\n    return this.games\r\n      .map(g => g.pickedValues)\r\n      .reduce((agg, array) => [...agg, ...array], [])\r\n      .reduce((agg: any, value) => {\r\n        agg[value] = agg[value] ? agg[value] + 1 : 1;\r\n        return agg;\r\n      }, {});\r\n  }\r\n\r\n  private persistGame(gameIndex: number, game: GameType) {\r\n    if (\r\n      this.currentGameIndex >= 0 &&\r\n      this.currentGameIndex < this.games.length\r\n    ) {\r\n      set(gameIndex.toString(), JSON.stringify(toJS(game))).catch(\r\n        console.error\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { GamesStore } from \"./store/GamesStore\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport './styles.css';\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  const { whyDidYouUpdate } = require(\"why-did-you-update\");\r\n  whyDidYouUpdate(React);\r\n}\r\n\r\nconst store = new GamesStore();\r\n\r\nReactDOM.render(<App store={store} />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}