{"version":3,"sources":["components/PickedNumber.tsx","components/PickedNumbersList.tsx","components/NumbersBoard/NumberCell.tsx","components/NumbersBoard/NumbersBoard.tsx","components/Chronometer.tsx","pages/GameComponent.tsx","pages/GamePage.tsx","components/TrashIcon.tsx","components/GameCard.tsx","components/NewGameCard.tsx","pages/Home.tsx","App.tsx","serviceWorker.ts","store/GamesStore.ts","index.tsx"],"names":["stylePicked","width","height","border","borderRadius","margin","display","justifyContent","alignItems","fontSize","color","fontFamily","styledAvailable","Object","objectSpread","PickedNumber","_this$props","this","props","value","on","react","data-testid","style","React","styles","container","gridArea","list","flexWrap","minHeight","PickedNumbersList","_ref","game","pickedValues","length","map","components_PickedNumber","key","containerStyle","NumberCell","handleClick","_this","toggleNumber","Button","onClick","basic","fluid","className","RowStyle","Row","getOnProp","c","nextProps","_isEqual","children","NumbersBoard","onValuePicked","_this$props$rows","rows","Array","fill","_","rowIndex","NumbersBoard_Row","cellIndex","NumberCell_NumberCell","includes","STEP_TIME","alignSelf","justifySelf","Chronometer","state","startTime","undefined","currentInterval","elapsedTime","play","Date","setInterval","getTime","setState","stop","clearInterval","timeFromPastSession","onStop","onTwoDigits","toString","padStart","startNow","previousProps","elapsedTimeAsDate","formattedTime","getUTCHours","getMinutes","getSeconds","filter","d","index","join","react_default","a","createElement","renderElapsedTime","PureComponent","defaultProps","gridTemplateAreas","gridTemplateColumns","buttonStyle","observer","isStarted","setDuration","handleValuePicked","components_NumbersBoard_NumbersBoard","components_PickedNumbersList","components_Chronometer","duration","Link","to","GamePage","inject","gamesStore","currentGameIndex","getIDAsNumber","games","initiateNewGame","match","params","id","Number","parseInt","getID","pages_GameComponent","toggleValue","handleDuration","action","_this2","_this3","iconStyle","position","top","left","TrashIcon","size","rest","objectWithoutProperties","assign","fillRule","clipRule","getDurationInMinutes","minutes","Math","floor","concat","nbDraws","Card","header","meta","description","extra","NewGameCard","newIndex","clearAllStyle","bottom","right","maxWidth","maxHeight","Fragment","as","role","aria-label","tabIndex","gameStore","window","confirm","trashAllGames","components_TrashIcon","Group","toConsumableArray","components_GameCard","components_NewGameCard","reverse","App","index_module","store","BrowserRouter","mobx_react_devtools_default","Route","path","exact","component","Home","Component","Boolean","location","hostname","NEW_GAME_TEMPLATE","GamesStore","GamesStore_class","classCallCheck","initializerDefineProperty","GamesStore_descriptor","GamesStore_descriptor2","autorun","persistGame","createClass","values","localStorage","element","observable","JSON","parse","gameIndex","indexOfValue","indexOf","updatedGame","slice","splice","push","clear","setItem","stringify","toJS","applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","getItemsFromStorage","getOwnPropertyDescriptor","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1c62d57.chunk.js","sourcesContent":["import * as React from \"react\";\n\ninterface PickedNumberProps {\n  value: number;\n  on: boolean;\n}\n\nconst stylePicked = {\n  width: \"2.5rem\",\n  height: \"2.5rem\",\n  border: \"5px solid #33e8\",\n  borderRadius: \"2rem\",\n  margin: \"3px\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  fontSize: \"large\",\n  // fontWeight: \"bold\",\n  color: \"#55f\",\n  fontFamily: \"monospace\"\n};\nconst styledAvailable = {\n  ...stylePicked,\n  border: \"5px solid lightgrey\",\n  color: \"grey\"\n};\n\nclass PickedNumber extends React.PureComponent<PickedNumberProps> {\n  render() {\n    const { value, on } = this.props;\n    return (\n      <div\n        data-testid={on ? \"picked\" : \"available\"}\n        style={on ? stylePicked : styledAvailable}\n      >\n        {value}\n      </div>\n    );\n  }\n}\n\nexport default PickedNumber;\n","import * as React from \"react\";\nimport { GameType } from \"./DayContext\";\nimport PickedNumber from \"./PickedNumber\";\nimport { CSSProperties } from \"../../node_modules/@types/react-dom/node_modules/@types/react\";\n\ninterface PickedNumbersListProps {\n  game: GameType;\n}\n\nconst styles: any = {\n  container: {\n    gridArea: \"list\"\n  },\n  list: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    minHeight: \"41px\"\n  }\n};\n\nconst PickedNumbersList: React.FunctionComponent<PickedNumbersListProps> = ({\n  game\n}) => (\n  <div style={styles.container}>\n    <h2> Total tirages: {game.pickedValues.length}</h2>\n    <div style={styles.list}>\n      {game &&\n        game.pickedValues.map(value => (\n          <PickedNumber value={value} key={value} on />\n        ))}\n    </div>\n  </div>\n);\n\nexport default PickedNumbersList;\n","import * as React from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport PickedNumber from \"../PickedNumber\";\n\nconst containerStyle = { display: \"flex\", justifyContent: \"center\" };\n\nexport interface CellProps {\n  value: number;\n  on: boolean;\n  toggleNumber: (value: number) => void;\n}\n\nexport default class NumberCell extends React.PureComponent<CellProps> {\n  handleClick = () => {\n    const { value, toggleNumber } = this.props;\n    toggleNumber(value);\n  };\n\n  render() {\n    return (\n      <Button onClick={this.handleClick} basic fluid className=\"nomargin\">\n        <div style={containerStyle}>\n          <PickedNumber {...this.props} />\n        </div>\n      </Button>\n    );\n  }\n}\n","import * as React from \"react\";\nimport _isEqual from 'lodash/isEqual';\nimport NumberCell, { CellProps } from \"./NumberCell\";\nimport { ReactElement } from \"react\";\n\ninterface NumbersBoardProps {\n  pickedValues: number[];\n  rows?: number;\n  onValuePicked: (value: number) => void;\n}\n\nconst RowStyle = {\n  display: \"flex\",\n  justifyContent: \"space-between\"\n};\n\nclass Row extends React.Component<{children: ReactElement<CellProps>[]}> {\n  getOnProp = (c: any) => c.props.on;\n  shouldComponentUpdate(nextProps: any) {\n    return !_isEqual(nextProps.children.map(this.getOnProp), this.props.children.map(this.getOnProp));\n  }\n\n  render() {\n    const { children } = this.props;\n    return <div style={RowStyle}>{children}</div>;\n  }\n}\n\nconst containerStyle = {\n  gridArea: \"board\"\n}\n\nclass NumbersBoard extends React.PureComponent<NumbersBoardProps> {\n\n  render() {\n    const { pickedValues, onValuePicked } = this.props;\n    const { rows = 9 } = this.props;\n    return (\n      <div style={containerStyle}>\n        {Array(rows)\n          .fill(null)\n          .map((_: number, rowIndex: number) => {\n            return (\n              <Row key={rowIndex}>\n                {Array(10)\n                  .fill(null)\n                  .map((_: number, cellIndex: number) => {\n                    const value = rowIndex * 10 + cellIndex + 1;\n                    return (\n                      <NumberCell\n                        key={cellIndex}\n                        value={value}\n                        on={pickedValues.includes(value)}\n                        toggleNumber={onValuePicked}\n                      />\n                    );\n                  })}\n              </Row>\n            );\n          })}\n      </div>\n    );\n  }\n}\n\nexport default NumbersBoard;\n","import React from \"react\";\n\ninterface ChronometerProps {\n  onStop: (duration: number) => void;\n  startNow?: boolean;\n  timeFromPastSession: number;\n}\n\ninterface ChronometerState {\n  currentInterval?: any;\n  elapsedTime?: number;\n}\n\nconst STEP_TIME = 1000;\n\nconst containerStyle = {\n  gridArea: \"chrono\",\n  alignSelf: \"start\",\n  justifySelf: \"end\"\n};\n\nclass Chronometer extends React.PureComponent<\n  ChronometerProps,\n  ChronometerState\n> {\n  static defaultProps = {\n    timeFromPastSession: 0\n  };\n\n  state = {\n    startTime: undefined,\n    currentInterval: undefined,\n    elapsedTime: undefined\n  };\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  componentDidMount() {\n    if (this.props.startNow) {\n      this.play();\n    }\n  }\n\n  componentDidUpdate(previousProps: ChronometerProps) {\n    if (!previousProps.startNow && this.props.startNow) {\n      this.play();\n    }\n  }\n\n  play = () => {\n    const startTime = new Date();\n    const currentInterval = setInterval(() => {\n      const elapsedTime = new Date().getTime() - startTime.getTime();\n      if (elapsedTime === 0) debugger;\n      this.setState({ elapsedTime });\n    }, STEP_TIME);\n    this.setState({ currentInterval });\n  };\n\n  stop = () => {\n    clearInterval(this.state.currentInterval);\n\n    const { timeFromPastSession } = this.props;\n    const { elapsedTime } = this.state;\n    if (elapsedTime) {\n      this.props.onStop(elapsedTime + timeFromPastSession * 1000);\n    }\n  };\n\n  onTwoDigits = (value: number) => value.toString().padStart(2, \"0\");\n\n  renderElapsedTime() {\n    const { timeFromPastSession } = this.props;\n    const elapsedTime = this.state.elapsedTime || 0;\n    const elapsedTimeAsDate = new Date(\n      elapsedTime + timeFromPastSession * 1000\n    );\n    const formattedTime = [\n      elapsedTimeAsDate.getUTCHours(),\n      elapsedTimeAsDate.getMinutes(),\n      elapsedTimeAsDate.getSeconds()\n    ]\n      .map(this.onTwoDigits)\n      .filter((d, index) => index !== 0 || d !== \"00\")\n      .join(\":\");\n\n    return <h2 data-testid=\"display\">{formattedTime}</h2>;\n  }\n\n  render() {\n    return <div style={containerStyle}>{this.renderElapsedTime()}</div>;\n  }\n}\n\nexport default Chronometer;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport PickedNumbersList from \"../components/PickedNumbersList\";\nimport NumbersBoard from \"../components/NumbersBoard/NumbersBoard\";\nimport { GameType } from \"../components/DayContext\";\nimport Chronometer from \"../components/Chronometer\";\n\ninterface Props {\n  game: GameType;\n  handleValuePicked: (value: number) => void;\n  setDuration: (value: number) => void;\n  isStarted: boolean;\n}\n\nconst containerStyle = {\n  display: \"grid\",\n  height: \"calc(100vh - 28px)\",\n  gridTemplateAreas: \"'board board' 'list chrono' 'list button'\",\n  gridTemplateColumns: \"82vw 1fr\"\n};\n\nconst buttonStyle = {\n  gridArea: \"button\",\n  alignSelf: \"end\",\n  justifySelf: \"end\"\n};\n\nconst GameComponent: React.FunctionComponent<Props> = ({\n  game,\n  isStarted,\n  setDuration,\n  handleValuePicked\n}) => (\n  <div style={containerStyle}>\n    <NumbersBoard\n      pickedValues={game.pickedValues}\n      onValuePicked={handleValuePicked}\n    />\n    <PickedNumbersList game={game} />\n\n    <Chronometer\n      startNow={isStarted}\n      onStop={setDuration}\n      timeFromPastSession={game.duration}\n    />\n    <Link to=\"/\" style={buttonStyle}>\n      <Button color=\"violet\">Fin de partie</Button>\n    </Link>\n  </div>\n);\n\nexport default observer(GameComponent);\n","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport GameComponent from \"./GameComponent\";\nimport { inject, observer } from \"mobx-react\";\nimport { GamesStore } from \"../store/GamesStore\";\nimport { action } from \"mobx\";\n\nexport interface GameParams {\n  id: string;\n}\n\nexport interface OwnProps {\n  gamesStore: GamesStore;\n}\n\n@inject(\"gamesStore\")\n@observer\nclass GamePage extends React.Component<\n  RouteComponentProps<GameParams> & OwnProps\n> {\n  state = { isStarted: false };\n\n  @action\n  componentDidMount() {\n    const { gamesStore } = this.props;\n    gamesStore.currentGameIndex = this.getIDAsNumber();\n    if (this.getIDAsNumber() >= gamesStore.games.length) {\n      gamesStore.initiateNewGame();\n    }\n  }\n\n  getID(): string {\n    return this.props.match.params.id;\n  }\n  getIDAsNumber(): number {\n    return Number.parseInt(this.getID());\n  }\n\n  @action\n  toggleValue = (value: number) => {\n    const { gamesStore } = this.props;\n    gamesStore.toggleValue(this.getIDAsNumber(), value);\n    this.setState({ isStarted: true });\n  };\n\n  @action\n  handleDuration = (value: number) => {\n    const { gamesStore } = this.props;\n    gamesStore.setDuration(this.getIDAsNumber(), value);\n  };\n\n  render() {\n    const { games } = this.props.gamesStore;\n    if (this.getIDAsNumber() >= games.length) return \"\";\n    const game = games[this.getIDAsNumber()];\n    const { isStarted } = this.state;\n    return (\n      <GameComponent\n        game={game}\n        isStarted={isStarted}\n        handleValuePicked={this.toggleValue}\n        setDuration={this.handleDuration}\n      />\n    );\n  }\n}\nexport default GamePage;\n","import React from \"react\";\n\nconst DEFAULT_SIZE = 32;\n\ninterface Props {\n  size?: number;\n  color?: string;\n}\n\nconst iconStyle: any = {\n  position: \"relative\",\n  top: \"4px\",\n  left: \"-5px\"\n};\n\nconst TrashIcon: React.FunctionComponent<Props> = ({\n  size,\n  color,\n  ...rest\n}) => (\n  <svg\n    fillRule=\"evenodd\"\n    clipRule=\"evenodd\"\n    width={size || DEFAULT_SIZE}\n    height={size || DEFAULT_SIZE}\n    {...rest}\n    fill={color || \"white\"}\n    style={iconStyle}\n  >\n    <path d=\"M9 3h6V1.25a.25.25 0 0 0-.25-.25h-5.5a.25.25 0 0 0-.25.25V3zm11 1H4v18a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V4zM10 7.5a.5.5 0 0 0-1 0v12a.5.5 0 0 0 1 0v-12zm5 0a.5.5 0 0 0-1 0v12a.5.5 0 0 0 1 0v-12zM23 3v1h-2v18a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4H1V3h7V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v2h7z\" />\n  </svg>\n);\n\nexport default TrashIcon;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Button } from \"semantic-ui-react\";\nimport { GameType } from \"./DayContext\";\nimport { observer } from \"mobx-react\";\n\ninterface GameCardProps {\n  game: GameType;\n  index: number;\n}\n\nfunction getDurationInMinutes(duration?: number) {\n  if (!duration) return \"\";\n  const minutes = Math.floor(duration / 60);\n  return `${minutes} minute${minutes > 1 ? \"s\" : \"\"}`;\n}\n\nfunction getDrawsToString(nbDraws: number) {\n  return `${nbDraws} tirage${nbDraws > 1 ? \"s\" : \"\"}`;\n}\n\nconst GameCard: React.FunctionComponent<GameCardProps> = ({ game, index }) => {\n  return (\n    <Card\n      header={`Partie ${index + 1}`}\n      meta={getDrawsToString(game.pickedValues.length) + \" - \" + getDurationInMinutes(game.duration)}\n      description={\n        <span data-testid=\"game-card\">{game.pickedValues.join(\", \")}</span>\n      }\n      extra={\n        <Link to={`/game/${index}`}>\n          <Button basic color=\"violet\">\n            Continuer\n          </Button>\n        </Link>\n      }\n    />\n  );\n};\n\nexport default observer(GameCard);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Button } from \"semantic-ui-react\";\n\nconst NewGameCard: React.FunctionComponent<{ newIndex: number }> = ({\n  newIndex\n}) => (\n  <Card\n    description=\"Démarrer nouvelle partie\"\n    extra={\n      <Link to={`/game/${newIndex}`}>\n        <Button color=\"violet\">Nouvelle partie</Button>\n      </Link>\n    }\n  />\n);\n\nexport default NewGameCard;\n","import React from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Card, Button } from \"semantic-ui-react\";\nimport { GamesStore } from \"../store/GamesStore\";\nimport TrashIcon from \"../components/TrashIcon\";\nimport GameCard from \"../components/GameCard\";\nimport NewGameCard from \"../components/NewGameCard\";\n\nfunction handleTrashAll(gameStore: GamesStore) {\n  if (window.confirm(\"Voulez-vous supprimer toutes les parties ?\")) {\n    gameStore.trashAllGames();\n  }\n}\n\nconst clearAllStyle = {\n  position: \"fixed\",\n  bottom: \"20px\",\n  right: \"20px\",\n  borderRadius: \"2rem\",\n  margin: 0,\n  maxWidth: \"56px\",\n  maxHeight: \"56px\"\n};\n\nconst Home: React.FunctionComponent<{ gamesStore: GamesStore }> = ({\n  gamesStore\n}) => (\n  <>\n    <Button\n      as=\"div\"\n      color=\"violet\"\n      role=\"button\"\n      aria-label=\"clear all games\"\n      tabIndex={0}\n      style={clearAllStyle}\n      onClick={() => handleTrashAll(gamesStore)}\n    >\n      <TrashIcon />\n    </Button>\n    <Card.Group>\n      {gamesStore.games &&\n        [\n          ...gamesStore.games.map((game, index) => (\n            <GameCard key={index} game={game} index={index} />\n          )),\n          <NewGameCard\n            newIndex={gamesStore.games.length}\n            key={gamesStore.games.length}\n          />\n        ].reverse()}\n    </Card.Group>\n  </>\n);\n\nexport default inject(\"gamesStore\")(observer(Home));\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport DevTools from \"mobx-react-devtools\";\nimport GamePage from \"./pages/GamePage\";\nimport { observer, Provider } from \"mobx-react\";\nimport Home from \"./pages/Home\";\nimport { GamesStore } from \"./store/GamesStore\";\n\ninterface Props {\n  store: GamesStore;\n}\n\n@observer\nclass App extends React.Component<Props> {\n  render() {\n    return (\n      <>\n        <Provider gamesStore={this.props.store}>\n          <Router>\n            <div>\n              <DevTools />\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/game/:id\" component={GamePage} />\n            </div>\n          </Router>\n        </Provider>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { GameType } from \"../components/DayContext\";\nimport { action, autorun, observable, toJS } from \"mobx\";\n\nconst NEW_GAME_TEMPLATE = { pickedValues: [], duration: 0 };\n\nexport class GamesStore {\n  constructor() {\n    autorun(() => {\n      this.persistGame(\n        this.currentGameIndex,\n        this.games[this.currentGameIndex]\n      );\n    });\n  }\n\n  @observable games: GameType[] = this.getItemsFromStorage();\n\n  private getItemsFromStorage(): GameType[] {\n    const values: string[] = Object.values(window.localStorage);\n    return values.map(element => observable(JSON.parse(element)));\n  }\n\n  @observable currentGameIndex: number = -1;\n\n  @action\n  toggleValue(gameIndex: number, value: number) {\n    const game = this.games[gameIndex];\n    const { pickedValues } = game;\n    const indexOfValue = pickedValues.indexOf(value);\n    if (pickedValues.length && indexOfValue === pickedValues.length - 1) {\n      // remove last\n      const updatedGame = {\n        ...game,\n        pickedValues: pickedValues.slice(0, pickedValues.length - 1)\n      };\n      this.games.splice(gameIndex, 1, updatedGame);\n    } else if (indexOfValue === -1) {\n      // if value exists in the array but not at the last place, don't add it\n      const updatedGame = { ...game, pickedValues: [...pickedValues, value] };\n      this.games.splice(gameIndex, 1, updatedGame);\n    }\n  }\n\n  @action\n  setDuration(gameIndex: number, duration: number): void {\n    this.games[gameIndex].duration = Math.floor(duration / 1000); // stores duration in seconds\n  }\n\n  @action\n  initiateNewGame(): void {\n    this.games.push(NEW_GAME_TEMPLATE);\n  }\n\n  @action\n  trashAllGames(): void {\n    this.games.splice(0, this.games.length);\n    this.currentGameIndex = -1;\n    localStorage.clear();\n  }\n\n  private persistGame(gameIndex: number, game: GameType) {\n    if (\n      this.currentGameIndex >= 0 &&\n      this.currentGameIndex < this.games.length\n    ) {\n      localStorage.setItem(gameIndex.toString(), JSON.stringify(toJS(game)));\n    }\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GamesStore } from \"./store/GamesStore\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport './styles.css';\n\nif (process.env.NODE_ENV !== \"production\") {\n  const { whyDidYouUpdate } = require(\"why-did-you-update\");\n  whyDidYouUpdate(React);\n}\n\nconst store = new GamesStore();\n\nReactDOM.render(<App store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}